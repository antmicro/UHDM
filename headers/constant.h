/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   constant.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_CONSTANT_H
#define UHDM_CONSTANT_H

#include "SymbolFactory.h"
#include "BaseClass.h"
#include "containers.h"
#include "uhdm.h"

namespace UHDM {

  class constant : public expr {
  public:
    // Implicit constructor used to initialize all members,
    // comment: constant();
    ~constant() final {}
    constant() = default;
    constant(BaseClass* parent,
             unsigned int parentType,
             SymbolFactory::ID file,
             unsigned int lineNo,
             int constType,
             bool isSigned) : vpiParent_(parent),
                              uhdmParentType_(parentType),
                              vpiFile_(file),
                              vpiLineNo_(lineNo),
                              vpiConstType_(constType),
                              vpiSigned_(isSigned) {}
    
    const BaseClass* VpiParent() const final { return vpiParent_; }

    bool VpiParent(BaseClass* data) final { vpiParent_ = data; if (data) uhdmParentType_ = data->UhdmType(); return true;}

    unsigned int UhdmParentType() const final { return uhdmParentType_; }

    bool UhdmParentType(unsigned int data) final { uhdmParentType_ = data; return true;}

    const std::string& VpiFile() const final;

    bool VpiFile(const std::string& data) final;

    unsigned int VpiLineNo() const final { return vpiLineNo_; }

    bool VpiLineNo(unsigned int data) final { vpiLineNo_ = data; return true;}

    int VpiConstType() const { return vpiConstType_; }

    bool VpiConstType(int data) { vpiConstType_ = data; return true;}

    bool VpiSigned() const { return vpiSigned_; }

    bool VpiSigned(bool data) { vpiSigned_ = data; return true;}

    unsigned int VpiType() { return vpiConstant; }

    UHDM_OBJECT_TYPE UhdmType() const final { return uhdmconstant; }   
  private:
    
    BaseClass* vpiParent_;

    unsigned int uhdmParentType_;

    SymbolFactory::ID vpiFile_;

    unsigned int vpiLineNo_;

    int vpiConstType_;

    bool vpiSigned_;

  };

  
  class constantFactory {
  friend Serializer;
  public:
  constant* Make() {
    constant* obj = new constant();
    objects_.push_back(obj);
    return obj;
  }
  private:
    std::vector<constant*> objects_;
  };
  
  
  class VectorOfconstantFactory {
  friend Serializer;
  public:
  std::vector<constant*>* Make() {
    std::vector<constant*>* obj = new std::vector<constant*>();
    objects_.push_back(obj);
    return obj;
  }
  private:
  std::vector<std::vector<constant*>*> objects_;
  };

};

#endif

